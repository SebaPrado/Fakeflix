{
  "version": 3,
  "sources": ["../../react-simple-star-rating/src/components/StarIcon.tsx", "../../react-simple-star-rating/src/reducer.ts", "../../react-simple-star-rating/src/components/Rating.tsx", "../../react-simple-star-rating/node_modules/style-inject/dist/style-inject.es.js"],
  "sourcesContent": ["import React from 'react'\r\n\r\nexport interface StarIconProps {\r\n  /** Icon width / height in `px` */\r\n  size?: number\r\n  SVGstrokeColor?: string\r\n  SVGstorkeWidth?: string | number\r\n  SVGclassName?: string\r\n  SVGstyle?: React.CSSProperties\r\n}\r\n\r\nexport function StarIcon({\r\n  size = 25,\r\n  SVGstrokeColor = 'currentColor',\r\n  SVGstorkeWidth = 0,\r\n  SVGclassName = 'star-svg',\r\n  SVGstyle\r\n}: StarIconProps) {\r\n  return (\r\n    <svg\r\n      className={SVGclassName}\r\n      style={SVGstyle}\r\n      stroke={SVGstrokeColor}\r\n      fill='currentColor'\r\n      strokeWidth={SVGstorkeWidth}\r\n      viewBox='0 0 24 24'\r\n      width={size}\r\n      height={size}\r\n      xmlns='http://www.w3.org/2000/svg'\r\n    >\r\n      <path d='M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z'></path>\r\n    </svg>\r\n  )\r\n}\r\n", "type State = {\r\n  ratingValue: number | null\r\n  hoverValue: number | null\r\n  hoverIndex: number\r\n  valueIndex: number\r\n}\r\n\r\ntype Action =\r\n  | { type: 'PointerMove'; payload: number | null; index: number }\r\n  | { type: 'PointerLeave' }\r\n  | { type: 'MouseClick'; payload: number }\r\n\r\nexport function reducer(state: State, action: Action): State {\r\n  switch (action.type) {\r\n    case 'PointerMove':\r\n      return {\r\n        ...state,\r\n        hoverValue: action.payload,\r\n        hoverIndex: action.index\r\n      }\r\n\r\n    case 'PointerLeave':\r\n      return {\r\n        ...state,\r\n        ratingValue: state.ratingValue,\r\n        hoverIndex: 0,\r\n        hoverValue: null\r\n      }\r\n\r\n    case 'MouseClick':\r\n      return {\r\n        ...state,\r\n        valueIndex: state.hoverIndex,\r\n        ratingValue: action.payload\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n", "import {\r\n  useMemo,\r\n  useReducer,\r\n  useCallback,\r\n  Fragment,\r\n  ReactNode,\r\n  CSSProperties,\r\n  MouseEvent,\r\n  PointerEvent,\r\n  useEffect\r\n} from 'react'\r\nimport { StarIcon, StarIconProps } from './StarIcon'\r\nimport { reducer } from '../reducer'\r\nimport css from '../style.module.css'\r\n\r\nexport interface RatingProps extends StarIconProps {\r\n  /** Handles the returned rating value */\r\n  onClick?: (value: number, index: number, event?: MouseEvent<HTMLSpanElement>) => void\r\n  /** onPointerMove callback function with `hover`, `index` alongside `event` values passed */\r\n  onPointerMove?: (value: number, index: number, event: PointerEvent<HTMLSpanElement>) => void\r\n  /** onPointerEnter callback function */\r\n  onPointerEnter?: (event: PointerEvent<HTMLSpanElement>) => void\r\n  /** onPointerLeave callback function */\r\n  onPointerLeave?: (event: PointerEvent<HTMLSpanElement>) => void\r\n  /** Set initial value */\r\n  initialValue?: number\r\n  /** Number of the icons */\r\n  iconsCount?: number\r\n  /** Read only mode */\r\n  readonly?: boolean\r\n  /** Add a group of icons */\r\n  customIcons?: {\r\n    icon: ReactNode\r\n  }[]\r\n  /** RTL mode */\r\n  rtl?: boolean\r\n  /** Enable a fractional rate (half icon) */\r\n  allowFraction?: boolean\r\n  /** Enable / Disable hover effect on empty icons */\r\n  allowHover?: boolean\r\n  /** Enable / Disable hover effect on filled icons */\r\n  disableFillHover?: boolean\r\n  /** Enable / Disable transition effect on mouse hover */\r\n  transition?: boolean\r\n  /** Applied to the `main` span */\r\n  className?: string\r\n  /** Inline style applied to the `main` span */\r\n  style?: CSSProperties\r\n\r\n  /** Custom fill icon SVG */\r\n  fillIcon?: ReactNode | null\r\n  /** Filled icons color */\r\n  fillColor?: string\r\n  /** Array of string to add color range */\r\n  fillColorArray?: string[]\r\n  /** Inline style applied to `filled-icons` icon span  */\r\n  fillStyle?: CSSProperties\r\n  /** Filled icons `span` className */\r\n  fillClassName?: string\r\n\r\n  /** Custom empty icon SVG */\r\n  emptyIcon?: ReactNode | null\r\n  /** Empty icons color */\r\n  emptyColor?: string\r\n  /** Inline style applied to `empty-icons` span  */\r\n  emptyStyle?: CSSProperties\r\n  /** ٌُEmpty icons `span` className */\r\n  emptyClassName?: string\r\n\r\n  /** Enable / Disable HTML`title` Tag */\r\n  allowTitleTag?: boolean\r\n  /** Show a tooltip with live values */\r\n  showTooltip?: boolean\r\n  /** Initial tooltip text if there is no rating value */\r\n  tooltipDefaultText?: string\r\n  /** Array of strings that will show inside the tooltip */\r\n  tooltipArray?: string[]\r\n  /** Inline style applied to the `tooltip` span */\r\n  tooltipStyle?: CSSProperties\r\n  /** Tooltip CSS className */\r\n  tooltipClassName?: string\r\n  /** Separator word in a title of a rating star `(1 out of 5)` */\r\n  titleSeparator?: string\r\n}\r\n\r\n/**\r\n * Check for touch devices\r\n * @returns `boolean`\r\n */\r\nfunction isTouchDevice() {\r\n  return (\r\n    (typeof window !== 'undefined' && window.matchMedia('(pointer: coarse)').matches) ||\r\n    'ontouchstart' in window ||\r\n    (typeof navigator !== 'undefined' && navigator.maxTouchPoints > 0)\r\n  )\r\n}\r\n\r\nexport function Rating({\r\n  onClick,\r\n  onPointerMove,\r\n  onPointerEnter,\r\n  onPointerLeave,\r\n  initialValue = 0,\r\n  iconsCount = 5,\r\n  size = 40,\r\n  readonly = false,\r\n  rtl = false,\r\n  customIcons = [],\r\n  allowFraction = false,\r\n  style,\r\n  className = 'react-simple-star-rating',\r\n  transition = false,\r\n\r\n  allowHover = true,\r\n  disableFillHover = false,\r\n\r\n  fillIcon = null,\r\n  fillColor = '#ffbc0b',\r\n  fillColorArray = [],\r\n  fillStyle,\r\n  fillClassName = 'filled-icons',\r\n\r\n  emptyIcon = null,\r\n  emptyColor = '#cccccc',\r\n  emptyStyle,\r\n  emptyClassName = 'empty-icons',\r\n\r\n  allowTitleTag = true,\r\n  showTooltip = false,\r\n  tooltipDefaultText = 'Your Rate',\r\n  tooltipArray = [],\r\n  tooltipStyle,\r\n  tooltipClassName = 'react-simple-star-rating-tooltip',\r\n\r\n  SVGclassName = 'star-svg',\r\n  titleSeparator = 'out of',\r\n  SVGstyle,\r\n  SVGstorkeWidth = 0,\r\n  SVGstrokeColor = 'currentColor'\r\n}: RatingProps) {\r\n  const [{ ratingValue, hoverValue, hoverIndex, valueIndex }, dispatch] = useReducer(reducer, {\r\n    hoverIndex: 0,\r\n    valueIndex: 0,\r\n    ratingValue: initialValue,\r\n    hoverValue: null\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (initialValue) dispatch({ type: 'MouseClick', payload: 0 })\r\n  }, [initialValue])\r\n\r\n  const totalIcons = useMemo(() => (allowFraction ? iconsCount * 2 : iconsCount), [allowFraction, iconsCount])\r\n\r\n  // Convert local rating value to precentage\r\n  const localRating = useMemo(() => {\r\n    if (initialValue > totalIcons) return 0\r\n\r\n    // Check for a decimal value\r\n    if (!allowFraction && Math.floor(initialValue) !== initialValue) {\r\n      return Math.ceil(initialValue) * 2 * 10\r\n    }\r\n\r\n    return Math.round((initialValue / iconsCount) * 100)\r\n  }, [allowFraction, initialValue, iconsCount, totalIcons])\r\n\r\n  const localRatingIndex = useMemo(() => (allowFraction ? initialValue * 2 - 1 : initialValue - 1) || 0, [\r\n    allowFraction,\r\n    initialValue\r\n  ])\r\n\r\n  const renderValue = useCallback(\r\n    (value: number) => (iconsCount % 2 !== 0 ? value / 2 / 10 : (value * iconsCount) / 100),\r\n    [iconsCount]\r\n  )\r\n\r\n  const handlePointerMove = (event: PointerEvent<HTMLSpanElement>) => {\r\n    const { clientX, currentTarget } = event\r\n    // Get main span element position and width\r\n    const { left, right, width } = currentTarget.children[0].getBoundingClientRect()\r\n\r\n    // Handle RTL\r\n    const positionX = rtl ? right - clientX : clientX - left\r\n\r\n    // Get current pointer position while moves over the icons\r\n    let currentValue = totalIcons\r\n    const iconWidth = Math.round(width / totalIcons)\r\n\r\n    for (let i = 0; i <= totalIcons; i = i + 1) {\r\n      if (positionX <= iconWidth * i) {\r\n        if (i === 0 && positionX < iconWidth) currentValue = 0\r\n        else currentValue = i\r\n        break\r\n      }\r\n    }\r\n\r\n    const index = currentValue - 1\r\n\r\n    if (currentValue > 0) {\r\n      // Set value and index state\r\n      dispatch({ type: 'PointerMove', payload: (currentValue * 100) / totalIcons, index })\r\n\r\n      if (onPointerMove) {\r\n        if (hoverValue) onPointerMove(renderValue(hoverValue), index, event)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handlePointerEnter = (event: PointerEvent<HTMLSpanElement>) => {\r\n    if (onPointerEnter) onPointerEnter(event)\r\n    // Enable only on touch devices\r\n    if (!isTouchDevice()) return\r\n\r\n    handlePointerMove(event)\r\n  }\r\n\r\n  const handleClick = (event?: MouseEvent<HTMLSpanElement>) => {\r\n    if (hoverValue) {\r\n      dispatch({ type: 'MouseClick', payload: hoverValue })\r\n      if (onClick) onClick(renderValue(hoverValue), hoverIndex, event)\r\n    }\r\n  }\r\n\r\n  const handlePointerLeave = (event: PointerEvent<HTMLSpanElement>) => {\r\n    if (isTouchDevice()) handleClick()\r\n\r\n    dispatch({ type: 'PointerLeave' })\r\n    if (onPointerLeave) onPointerLeave(event)\r\n  }\r\n\r\n  const valuePercentage = useMemo(() => {\r\n    if (allowHover) {\r\n      if (disableFillHover) {\r\n        const currentValue = (ratingValue && ratingValue) || localRating\r\n        return hoverValue && hoverValue > currentValue ? hoverValue : currentValue\r\n      }\r\n      return (hoverValue && hoverValue) || (ratingValue && ratingValue) || localRating\r\n    }\r\n\r\n    return (ratingValue && ratingValue) || localRating\r\n  }, [allowHover, disableFillHover, hoverValue, ratingValue, localRating])\r\n\r\n  useEffect(() => {\r\n    if (tooltipArray.length > totalIcons) {\r\n      console.error('tooltipArray Array length is bigger then Icons Count length.')\r\n    }\r\n  }, [tooltipArray.length, totalIcons])\r\n\r\n  const ratingArray = useCallback(\r\n    (array: string[]) => {\r\n      return (\r\n        (hoverValue && array[hoverIndex]) ||\r\n        (ratingValue && array[valueIndex]) ||\r\n        (initialValue && array[localRatingIndex])\r\n      )\r\n    },\r\n    [hoverValue, hoverIndex, ratingValue, valueIndex, initialValue, localRatingIndex]\r\n  )\r\n\r\n  const ratingRenderValues = useMemo(() => {\r\n    return (\r\n      (hoverValue && renderValue(hoverValue)) ||\r\n      (ratingValue && renderValue(ratingValue)) ||\r\n      (initialValue && renderValue(localRating))\r\n    )\r\n  }, [hoverValue, renderValue, ratingValue, initialValue, localRating])\r\n\r\n  return (\r\n    <span className={css.starRatingWrap} style={{ direction: `${rtl ? 'rtl' : 'ltr'}` }}>\r\n      <span\r\n        className={`${css.simpleStarRating} ${className}`}\r\n        style={{\r\n          cursor: readonly ? '' : 'pointer',\r\n          ...style\r\n        }}\r\n        onPointerMove={readonly ? undefined : handlePointerMove}\r\n        onPointerEnter={readonly ? undefined : handlePointerEnter}\r\n        onPointerLeave={readonly ? undefined : handlePointerLeave}\r\n        onClick={readonly ? undefined : handleClick}\r\n        aria-hidden='true'\r\n      >\r\n        <span\r\n          className={`${css.emptyIcons} ${emptyClassName}`}\r\n          style={{\r\n            color: emptyColor,\r\n            ...emptyStyle\r\n          }}\r\n        >\r\n          {[...Array(iconsCount)].map((_, index) => (\r\n            <Fragment key={index}>\r\n              {customIcons[index]?.icon || emptyIcon || (\r\n                <StarIcon\r\n                  SVGclassName={SVGclassName}\r\n                  SVGstyle={SVGstyle}\r\n                  SVGstorkeWidth={SVGstorkeWidth}\r\n                  SVGstrokeColor={SVGstrokeColor}\r\n                  size={size}\r\n                />\r\n              )}\r\n            </Fragment>\r\n          ))}\r\n        </span>\r\n\r\n        <span\r\n          className={`${css.fillIcons} ${fillClassName}`}\r\n          style={{\r\n            [rtl ? 'right' : 'left']: 0,\r\n            color: ratingArray(fillColorArray) || fillColor,\r\n            transition: transition ? 'width .2s ease, color .2s ease' : '',\r\n            width: `${valuePercentage}%`,\r\n            ...fillStyle\r\n          }}\r\n          title={allowTitleTag ? `${ratingRenderValues} ${titleSeparator} ${iconsCount}` : undefined}\r\n        >\r\n          {[...Array(iconsCount)].map((_, index) => (\r\n            <Fragment key={index}>\r\n              {customIcons[index]?.icon || fillIcon || (\r\n                <StarIcon\r\n                  SVGclassName={SVGclassName}\r\n                  SVGstyle={SVGstyle}\r\n                  SVGstorkeWidth={SVGstorkeWidth}\r\n                  SVGstrokeColor={SVGstrokeColor}\r\n                  size={size}\r\n                />\r\n              )}\r\n            </Fragment>\r\n          ))}\r\n        </span>\r\n      </span>\r\n\r\n      {showTooltip && (\r\n        <span\r\n          className={`${css.tooltip} ${tooltipClassName}`}\r\n          style={{\r\n            [rtl ? 'marginRight' : 'marginLeft']: 20,\r\n            ...tooltipStyle\r\n          }}\r\n        >\r\n          {(tooltipArray.length > 0 ? ratingArray(tooltipArray) : ratingRenderValues) || tooltipDefaultText}\r\n        </span>\r\n      )}\r\n    </span>\r\n  )\r\n}\r\n", "function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n"],
  "mappings": "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",
  "names": ["StarIcon", "_a", "_b", "size", "_c", "SVGstrokeColor", "_d", "SVGstorkeWidth", "_e", "SVGclassName", "SVGstyle", "_jsx", "className", "style", "stroke", "fill", "strokeWidth", "viewBox", "width", "height", "xmlns", "jsx", "d", "reducer", "state", "action", "type", "__assign", "hoverValue", "payload", "hoverIndex", "index", "ratingValue", "valueIndex", "isTouchDevice", "window", "matchMedia", "matches", "navigator", "maxTouchPoints", "css", "ref", "insertAt", "document", "head", "getElementsByTagName", "createElement", "firstChild", "insertBefore", "appendChild", "styleSheet", "cssText", "createTextNode", "onClick", "onPointerMove", "onPointerEnter", "onPointerLeave", "initialValue", "iconsCount", "_f", "_g", "readonly", "_h", "rtl", "_j", "customIcons", "_k", "allowFraction", "_l", "_m", "transition", "_o", "allowHover", "_p", "disableFillHover", "_q", "fillIcon", "_r", "fillColor", "_s", "fillColorArray", "fillStyle", "_t", "fillClassName", "_u", "emptyIcon", "_v", "emptyColor", "emptyStyle", "_w", "emptyClassName", "_x", "allowTitleTag", "_y", "showTooltip", "_z", "tooltipDefaultText", "_0", "tooltipArray", "tooltipStyle", "_1", "tooltipClassName", "_2", "_3", "titleSeparator", "_4", "_5", "_6", "useReducer", "_7", "dispatch", "useEffect", "totalIcons", "useMemo", "localRating", "Math", "floor", "round", "ceil", "localRatingIndex", "renderValue", "useCallback", "value", "handlePointerMove", "event", "clientX", "currentTarget", "children", "getBoundingClientRect", "left", "right", "positionX", "currentValue", "iconWidth", "i", "handleClick", "valuePercentage", "length", "console", "error", "ratingArray", "array", "ratingRenderValues", "_jsxs", "jsxs", "direction", "concat", "cursor", "color", "__spreadArray", "Array", "map", "_", "Fragment", "icon", "title", "undefined"]
}
